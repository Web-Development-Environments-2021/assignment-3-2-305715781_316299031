---
openapi: 3.0.0
info:
  title: Simple Inventory API
  description: This is a simple API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
tags:
- name: users
  description: All user function
paths:
  /register/:
    post:
      tags:
      - Auth
      summary: This is the register, A new user from th client is added to the server
      description: A JSON object contains all the detalis about the new user
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/register'
        required: true
      responses:
        "201":
          description: A new user has been added
        "400":
          description: bad input parameter
  /login/:
    post:
      tags:
      - Auth
      summary: This is the login, a user trining to connect
      description: A JSON object contains all the detalis about the new user
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
        required: true
      responses:
        "200":
          description: The  user has been login successfully
        "401":
          description: bad input parameter
  /logout/:
    post:
      tags:
      - Auth
      description: This is the logOut
      responses:
        "200":
          description: logout succeeded
          headers:
            delete-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: ""
  /users/favoritePlayers/:
    get:
      tags:
      - users
      summary: my favorite players
      description: By passing in the appropriate options, you can get your favorite players that store in the DB.
      responses:
        "201":
          description: get my favorite successfuly
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/favoritPlayer'
        "404":
          description: my favorites not found
    post:
      tags:
      - users
      description: add the player to my favorite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/favoritPlayer'
      responses:
        "200":
          description: A new player has been iserted to favorites successfuly
        "401":
          description: already in favorites
        "404":
          description: bad input parameter
  /users/favoriteTeams/:
    get:
      tags:
      - users
      summary: my favorite teams
      description: By passing in the appropriate options, you can get your favorite teams that store in the DB.
      responses:
        "201":
          description: get my favorite successfuly
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/favoritTeam'
        "404":
          description: my favorites not found
    post:
      tags:
      - users
      description: add the team to my favorite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/favoritTeam'
      responses:
        "200":
          description: A new team has been iserted to favorites successfuly
        "401":
          description: already in favorites
        "404":
          description: bad input parameter
  /users/favoriteGames/:
    get:
      tags:
      - users
      summary: my favorite games
      description: By passing in the appropriate options, you can get your favorite games that store in the DB.
      responses:
        "201":
          description: get my favorite successfuly
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/favoritGame'
        "404":
          description: my favorites not found
    post:
      tags:
      - users
      description: add the game to my favorite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/favoritGame'
      responses:
        "200":
          description: A new game has been iserted to favorites successfuly
        "401":
          description: already in favorites
        "404":
          description: bad input parameter
  /users/Search/team/:id/:
    get:
      tags:
      - guest
      summary: search team by id
      description: A JSON object contains all the detalis about the team
      responses:
        "200":
          description: Succesfully found the team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchTeam'
        "401":
          description: bad input parameter
  /users/search/playerCoach/:id/:
    get:
      tags:
      - guest
      summary: search player by id
      description: A JSON object contains all the detalis about the player
      responses:
        "200":
          description: Succesfully found the player
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/favoritPlayer'
        "401":
          description: bad input parameter
  /admin/addGame/:
    post:
      tags:
      - admin
      summary: add game to table
      description: A JSON object contains all the detalis about the game
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/favoritGame'
        required: true
      responses:
        "200":
          description: A new game has been iserted to favorites successfuly
        "401":
          description: already in favorites
        "404":
          description: bad input parameter
  /admin/eventSchedule/:id/:
    post:
      tags:
      - admin
      summary: eventSchedule
      description: A JSON object contains all the detalis about the events from a game
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/eventSchedule'
        required: true
      responses:
        "200":
          description: A new eventSchedule to game() has been iserted to the web
        "404":
          description: bad input parameter
  /admin/resultGame/:id/:
    post:
      tags:
      - admin
      summary: add result the game
      description: A JSON object contains all the detalis about the result of the game
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/resultGame'
        required: true
      responses:
        "200":
          description: A new result to game.id=id  has been inserted
        "404":
          description: bad input parameter
components:
  schemas:
    register:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username contains between 3 to 8 letters only
          example: NicoleKenig
        firstname:
          type: string
          description: the user first name
          example: Nicole
        lastname:
          type: string
          description: the user last name
          example: Kenig
        country:
          type: string
          description: the user country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: |
            password contains between 5 to 10 chars, at least on of them is a number and a special char
          format: password
          example: joanne@26
        confirmation password:
          maxLength: 10
          minLength: 5
          type: string
          description: |
            password contains between 5 to 10 chars, at least on of them is a number and a special char
          format: password
          example: joanne@26
        email:
          type: string
          description: the user email
          format: email
          example: ladygaga@gmail.com
        image-url:
          type: string
          description: URL for the user's image
          format: URL
          example: https://cloudinary.com/ladygaga
    login:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username contains between 3 to 8 letters only
          example: naor1
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: |
            password contains between 5 to 10 chars, at least on of them is a number and a special char
          format: password
          example: 123456
    favoritPlayer:
      type: object
      properties:
        player_id:
          type: integer
          description: id of player
          example: 90
    favoritTeam:
      type: object
      properties:
        team_id:
          type: int
          description: username contains between 3 to 8 letters only
          example: NicoleKenig
    favoritGame:
      type: object
      properties:
        date:
          maxLength: 6
          minLength: 6
          type: string
          description: game date
          example: 09/05/21
        hour:
          maxLength: 4
          minLength: 4
          type: string
          description: when the game start
          example: "960"
        homeTeam:
          type: string
          description: home team mane
          example: Macabi Tel Aviv
        awayTeam:
          type: string
          description: away team mane
          example: Macabi Haifa
        fild:
          type: string
          description: fild mane
          example: Blomfiled
        result:
          type: string
          example: "243"
    SearchTeam:
      type: object
      properties:
        name:
          type: string
          description: Team name
          example: Macabi Netanya
        image-url:
          type: string
          description: URL for the logo Team
          format: URL
          example: https://cloudinary.com/ladygaga
    eventSchedule:
      type: object
      properties:
        data:
          type: string
          description: which event happend
          example: goal/ red/yellow tickect / injury / change player/ offense
        hour:
          type: integer
          description: when its happend in hour
        minute:
          type: integer
          description: when its happend in minute
        EventDescription:
          type: string
          description: what happend in the event
          example: Jovany rosso put goal at by passs he got from....
    resultGame:
      type: object
      properties:
        homeTeamScore:
          type: integer
          example: 4
        awayTeamScore:
          type: integer
          example: 5
